#BlueJ class context
comment0.target=Valley
comment0.text=\r\n\ constructor\ de\ un\ valle\r\n
comment1.params=x\ y
comment1.target=Valley(int,\ int)
comment1.text=\r\n\ Contructor\ de\ type\ VineYard\ Objects\ \r\n\ Crea\ el\ vaye\ y\ lo\ hace\ visible\ a\ la\ medida\ \r\n\ @param\ x\ tama\u00F1o\ en\ esta\ dimension\ ,\ y\ tama\u00F1o\ en\ esta\ dimension\ \r\n
comment10.params=lowerEnd\ higherEnd
comment10.target=java.lang.String\ verificarColorLona(int[],\ int[])
comment10.text=\r\n\ @param\ int[]\ lowerEnd,\ int[]\ higherEnd\ coordenadas\ punto1\ y\ punto2\r\n\ verifica\ el\ color\ de\ una\ lona\ y\ respecto\ a\ su\ posicion\ con\ los\ vi\u00F1edos\ \r\n\ @return\ String\ color\ color\ del\ que\ deberia\ ser\ la\ lona\ \r\n
comment11.params=position
comment11.target=void\ removeTrap(int)
comment11.text=\r\n\ Elimina\ una\ trampa\ en\ orden\ de\ creacion\ o\ posicion\ en\ arreglo\ \r\n\ @param\ int\ position\ a\ borrar\ \r\n
comment12.params=trap\ x
comment12.target=void\ makePuncture(int,\ int)
comment12.text=\r\n\ Realiza\ un\ hueco\ en\ una\ posicion\ Y\ dada\ y\ en\ un\ numero\ de\ lona\ dado\ \r\n\ @param\ trap\ o\ lona,\ x\ coordenada\ o\ distancia\ \r\n
comment13.params=trap\ position
comment13.target=void\ patchPuncture(int,\ int)
comment13.text=\r\n\ Elimina\ o\ parcha\ un\ hueco\ realizado\ dada\ una\ lona\ y\ una\ coordeanda\ lona\ \r\n\ @param\ trap\ o\ lona,\ position,\ coordeanda\ x\ \r\n
comment14.params=x
comment14.target=void\ startRain(int)
comment14.text=\r\n\ Cuando\ se\ ejecuta\ este\ metodo\ empieza\ a\ llover\ \r\n
comment15.params=x
comment15.target=void\ startRainAcid(int)
comment15.text=\r\n\ Contructor\ de\ una\ lluvia\ acida\ \r\n\ una\ lluvia\ acida\ es\ identificada\ por\ arrasar\ todo\ lo\ que\ tiene\ por\ delante\ \r\n\ @param\ x\ coordenada\ en\ x\ donde\ inicia\ a\ llover\ \r\n
comment16.params=x
comment16.target=void\ startRainArcoiris(int)
comment16.text=\r\n\ Contructor\ de\ una\ lluvia\ arcoiris\r\n\ una\ lluvia\ arcoiris\ es\ identificada\ por\ cambiar\ de\ color\ mientras\ llueve\r\n\ @param\ x\ coordenada\ en\ x\ donde\ inicia\ a\ llover\ \r\n
comment17.params=x
comment17.target=void\ startRainStraight(int)
comment17.text=\r\n\ Contructor\ de\ una\ lluvia\ straight\r\n\ una\ lluvia\ straight\ es\ identificada\ por\ mover\ su\ posicion\ \ para\ mantenerse\ recta\r\n\ @param\ x\ coordenada\ en\ x\ donde\ inicia\ a\ llover\ \r\n
comment18.params=position
comment18.target=void\ stopRain(int)
comment18.text=\r\n\ Cuando\ se\ invoca\ este\ metodo\ para\ la\ lluvia\ \r\n\ @param\ posicion\ donde\ deberia\ dejar\ de\ llover\r\n
comment19.params=
comment19.target=java.lang.String[]\ rainFalls()
comment19.text=\r\n\ Esta\ funcion\ indica\ los\ vi\u00F1edos\ que\ han\ sido\ regados\ \r\n\ @return\ vinedosRegados\ arreglo\ con\ los\ nombres\ de\ los\ vi\u00F1edos\ regados\ \r\n
comment2.params=name\ xi\ xf
comment2.target=void\ openVineyard(java.lang.String,\ int,\ int)
comment2.text=\r\n\ Abre\ un\ nuevo\ VineYard\ teniendo\ en\ cuenta\ que\ no\ pueden\ estar\ uno\ encima\ del\ otro\ y\ ademas\ que\ tienen\ que\ tener\ nombre\ diferentes\r\n\ crea\ un\ ArrayList\ de\ posiciones\ para\ el\ VineYard\ y\ uno\ para\ objetos\ de\ tipo\ VineYard\r\n\ @param\ \ name\ nombre\ del\ VineYard,\ xi\ posicion\ en\ X\ inicial\ ,\ xf\ posicion\ en\ X\ final\ \r\n
comment20.params=d
comment20.target=void\ Do(char)
comment20.text=\r\n\ @param\ char\ d\ \r\n\ Ingresa\ un\ caracter\ que\ indica\ que\ accion\ se\ quiere\ hacer,\ deshacer\ U\ o\ rehacer\ D\ \r\n
comment21.params=
comment21.target=void\ makeVisible()
comment21.text=\r\n\ Vuelve\ Visible\ el\ objeto\ de\ tipo\ valle\ y\ sus\ componentes\ \r\n
comment22.params=
comment22.target=void\ makeInvisible()
comment22.text=\r\n\ Vuelve\ invisible\ el\ objeto\ de\ tipo\ valle\ y\ sus\ componentes\ \r\n
comment23.params=
comment23.target=void\ finish()
comment23.text=\ \r\n\ Finaliza\ la\ ejecucion\ de\ una\ simulacion\ \r\n
comment24.params=
comment24.target=void\ ok()
comment24.text=\r\n\ Contructor\ ok\r\n\ \r\n
comment25.params=simbolo
comment25.target=void\ zoom(java.lang.String)
comment25.text=\r\n\ @param\ String\ simbolo\r\n\ recibe\ un\ simbolo\ que\ sera\ +\ o\ -\ dependiendo\ la\ accion\ que\ se\ quiera\ hacer,\ acercar\ o\ alejar\ el\ valle\ y\ sus\ componentes\ \r\n
comment26.params=
comment26.target=int[][]\ vineyards()
comment26.text=\r\n\ Esta\ funcion\ retorna\ los\ vi\u00F1edos\ existentes\ sus\ coordenadas\ de\ inicio\ y\ fin\ \r\n\ @return\ int\ vinedos\r\n
comment27.params=
comment27.target=int[][][]\ tarps()
comment27.text=\r\n\ retorna\ las\ lonas\ existentes\ sus\ coordenadas\ del\ punto\ uno(X1,Y1),\ punto\ dos(X2,Y2)\ y\ los\ huecos\ existentes\ en\ esta\ lona(Posicion\ en\ x)\ \r\n\ @return\ int[][][]\ tarps\r\n
comment28.params=
comment28.target=int[][][]\ rains()
comment28.text=\r\n\ Retorna\ las\ coordenadas\ de\ la\ lluvia\ su\ posicion\ en\ X\ y\ en\ Y\ de\ cada\ punto\ de\ lluvia\r\n\ @return\ int[][][]\ rain\r\n
comment3.params=name
comment3.target=void\ closeVineyard(java.lang.String)
comment3.text=\r\n\ Elimina\ un\ VineYard\ completamente,\ de\ su\ lista\ de\ VineYards\ y\ su\ lista\ de\ cordenadas\ ademas\ lo\ vuelve\ invisible\r\n
comment4.params=lowerEnd\ higherEnd
comment4.target=void\ addTrap(int[],\ int[])
comment4.text=\r\n\ Crea\ una\ lona\ o\ Tarp\ \r\n\ @param\ lowerEnd\ coordenadas\ X1,\ Y1,\ higherEnd\ coordenadas\ X2,\ Y2\ \r\n
comment5.params=lowerEnd\ higherEnd
comment5.target=void\ addTrapHard(int[],\ int[])
comment5.text=\r\n\ Crea\ una\ lona\ hard\r\n\ se\ caracteriza\ poir\ no\ dejarse\ agujerear\r\n\ @param\ lowerEnd\ coordenadas\ X1,\ Y1,\ higherEnd\ coordenadas\ X2,\ Y2\ \ \ \ \r\n
comment6.params=lowerEnd\ higherEnd
comment6.target=void\ addTrapFlex(int[],\ int[])
comment6.text=\r\n\ Crea\ una\ lona\ flexible\r\n\ se\ caracteriza\ por\ solo\ tener\ un\ hueco,\ si\ se\ abre\ otro\ se\ auto\ parcha\ el\ anterior\r\n\ @param\ lowerEnd\ coordenadas\ X1,\ Y1,\ higherEnd\ coordenadas\ X2,\ Y2\ \ \ \ \r\n
comment7.params=lowerEnd\ higherEnd
comment7.target=void\ addTrapRebelde(int[],\ int[])
comment7.text=\r\n\ Crea\ una\ lona\ rebelde\r\n\ se\ caracteriza\ por\ decidir\ hacerse\ visible\ o\ invisible\ cuando\ se\ hace\ un\ hueco\r\n\ @param\ lowerEnd\ coordenadas\ X1,\ Y1,\ higherEnd\ coordenadas\ X2,\ Y2\ \ \ \ \r\n
comment8.params=lowerEnd\ higherEnd
comment8.target=void\ addTrapRadical(int[],\ int[])
comment8.text=\r\n\ Crea\ una\ lona\ radical\r\n\ se\ caracteriza\ por\ hacerse\ invisible\ cuando\ se\ hace\ un\ hueco\r\n\ @param\ lowerEnd\ coordenadas\ X1,\ Y1,\ higherEnd\ coordenadas\ X2,\ Y2\ \ \ \ \r\n
comment9.params=lonas
comment9.target=java.util.ArrayList\ ordenarLonas(java.util.ArrayList)
comment9.text=\r\n\ @param\ ArrayList<Tarp>\ lonas\ arreglo\ de\ lonas\ en\ el\ valle\ \r\n\ organiza\ las\ lonas\ de\ un\ valle\ en\ un\ arrayList\r\n\ return\ ArrayList<Tarp>\ lonasOrdenadas\ \r\n
numComments=29
